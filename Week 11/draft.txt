 	.syntax unified
 	.cpu cortex-m3
 	.thumb
 	.align 2
 	.global	classification
 	.thumb_func

@ CG2028 Assignment, Sem 2, AY 2021/22
@ (c) CG2028 Teaching Team, ECE NUS, 2021

@ student 1: Name: Zhuang Jianning, Matriculation No.: A0214561M
@ student 2: Name: , Matriculation No.:
@ eg: student 1: Name: John Doe , Matriculation No.: A021234N

@Register map
@R0 - N, returns class
@R1 - points
@R2 - label
@R3 - sample
@R4 - <use(s)>
@R5 - <use(s)>
@....

classification:
@ PUSH / save (only those) registers which are modified by your function
		PUSH {R1-R4,R14}
@ parameter registers need not be saved.

@ write asm function body here

@ branch to SUBROUTINE for illustration only
		BL SUBROUTINE
@ prepare value to return (class) to C program in R0
@ the #5 here is an arbitrary result
		MOVW R0, #6
@ POP / restore original register values. DO NOT save or restore R0. Why?
		POP {R1-R4,R14}
@ return to C program
		BX	LR

@ you could write your code without SUBROUTINE
SUBROUTINE:

		BX LR

@label: .word value

@.lcomm label num_bytes


int classification_c(int N, int* points, int* label, int* sample)
{ 	// The implementation below is meant only for verifying your results.
	
	int i,j,n;
	int class;// returned labels of k=1 nearest neighbors
	int d[N]; // squared Euclidean distance
	int d1, d2;

	
	// calculate the squared distance between test sample and each training data points
	for (i=0; i<N; i++){
		d[i] = (points[2*i]-sample[0]) * (points[2*i]-sample[0])
		+ (points[2*i+1]-sample[1])*(points[2*i+1]-sample[1]);
	}

	// print all distances
	for (i=0; i<N; i++){
		printf( "d%d = %d, class = %d \n",i+1, d[i],label[i]) ;
	}

	// find the k=1 nearest neighbors

	for (j=0; j<N; j++){
		d1 = d[j];
		for (n=0; n<N; n++){
			d2 = d[n];
			if (d1<d2 && d1>=0 && d2>=0){
				class = label[j];
			}
			else if (d1>=0 && d2>=0){
				class = label[n];
			}
		}
	}
	
	return class;
}

 	.syntax unified
 	.cpu cortex-m3
 	.thumb
 	.align 2
 	.global	classification
 	.thumb_func

@ CG2028 Assignment, Sem 2, AY 2021/22
@ (c) CG2028 Teaching Team, ECE NUS, 2021

@ student 1: Name: Zhuang Jianning, Matriculation No.: A0214561M
@ student 2: Name: , Matriculation No.:
@ eg: student 1: Name: John Doe , Matriculation No.: A021234N

@Register map
@R0 - N, returns class
@R1 - points
@R2 - label
@R3 - sample
@R4 - distances
@R5 - current_distance
@R6 - px, current_class
@R7 - py
@R8 - sx
@R9 - sy
@R10 - i counter
@R11 - current_nearest
@R12 - nearest_class

classification:
@ PUSH / save (only those) registers which are modified by your function
@ parameter registers need not be saved.
		PUSH {R4-R12}
@ write asm function body here

		@initialise counter in for loop for (i=0; i<N; i++)
		MOV R10, R0

		@load start address of distances array
		LDR R4, =distances

		@load sample[0] into sx
		LDR R8, [R3], #4
		@load sample[1] into sy
		LDR R9, [R3]

		@initialise current_nearest to be some max will change to be a check of -1 in loop later (all euclidean distances must be >=0 )
		MOV R11, #1000
		@initialise nearest_class to be class of point[0]
		LDR R12, [R2]

distance_loop:

		@load points[2*i] into px
		LDR R6, [R1], #4
		@load points[2*i+1] into py
		LDR R7, [R1], #4
		@calculate (px-sx) and store back in R6
		SUB R6, R6, R8
		@calculate (px-sx)^2 and store back in R6
		MUL R6, R6, R6
		@calculate (py-sy) and store back in R7
		SUB R7, R7, R9
		@calculate (py-sy)^2 and store back in R7
		MUL R7, R7, R7
		@store result in current_distance
		ADD R5, R6, R7
		@store current_distance in distance[i]
		STR R5, [R4], #4
		@load class of current point
		LDR R6, [R2], #4
		@compare current_distance with current_nearest
		CMP R5, R11
		@if lesser than
		ITT	LT
		@update new nearest distance
		MOVLT R11, R5
		@update nearest_class
		MOVLT R12, R6
		@decrement counter i
		SUBS R10, #1
		@compare counter to continue loop
		BGT distance_loop

@ branch to SUBROUTINE for illustration only

@ prepare value to return (class) to C program in R0
@ the #5 here is an arbitrary result
		MOV R0, R12
@ POP / restore original register values. DO NOT save or restore R0. Why?
		POP {R4-R12}
@ return to C program
		BX	LR

@ you could write your code without SUBROUTINE
SUBROUTINE:

		BX LR

@label: .word value
.equ 	MAX_N,		10

@.lcomm label num_bytes
.lcomm	distances	(MAX_N)*4
.lcomm	d1			4
.lcomm	d2			4
.lcomm	class		4





 	.syntax unified
 	.cpu cortex-m3
 	.thumb
 	.align 2
 	.global	classification
 	.thumb_func

@ CG2028 Assignment, Sem 2, AY 2021/22
@ (c) CG2028 Teaching Team, ECE NUS, 2021

@ student 1: Name: Zhuang Jianning, Matriculation No.: A0214561M
@ student 2: Name: , Matriculation No.:
@ eg: student 1: Name: John Doe , Matriculation No.: A021234N

@Register map
@R0 - N, returns class
@R1 - points
@R2 - label
@R3 - sample
@R4 - current_distance
@R5 - current_class
@R6 - px
@R7 - py
@R8 - sx
@R9 - sy
@R10 - loop counter
@R11 - nearest_distance
@R12 - nearest_class

classification:
@ PUSH / save (only those) registers which are modified by your function
@ parameter registers need not be saved.
		PUSH {R1-R12}
@ write asm function body here

		@initialise counter in for loop for (i=0; i<N; i++)
		MOV R10, R0 @0b0000,0001,1010,0000,1010,0000,0000,0100 = 0x01A0A004

		@load sample[0] into sx
		LDR R8, [R3], #4 @0b0000,0100,1001,0011,1000,0000,0000,0100 = 0x04934004
		@load sample[1] into sy
		LDR R9, [R3]


distance_loop:

		@load points[2*i] into px
		LDR R6, [R1], #4
		@load points[2*i+1] into py
		LDR R7, [R1], #4

		@calculate (px-sx) and store back in R6
		SUB R6, R6, R8
		@calculate (px-sx)^2 and store back in R6
		MUL R6, R6, R6
		@calculate (py-sy) and store back in R7
		SUB R7, R7, R9
		@calculate (py-sy)^2 and store back in R7
		MUL R7, R7, R7

		@store result in current_distance
		ADD R4, R6, R7
		@load class of current point into current_class
		LDR R5, [R2], #4

		@compare current counter i and N
		CMP R10, R0
		@if equal
		ITT EQ
		@initialise current_distance with distance of point[0]
		MOVEQ R11, R4
		@initialise nearest_class with class of point[0]
		MOVEQ R12, R5

		@compare current_distance with current_nearest
		CMP R4, R11
		@if lesser than
		ITT	LT
		@update new nearest distance
		MOVLT R11, R4
		@update nearest_class
		MOVLT R12, R5

		@decrement counter i
		SUBS R10, #1
		@compare counter to continue loop
		BGT distance_loop


@ prepare value to return (class) to C program in R0
@ the #5 here is an arbitrary result
		@move nearest class to R0 to be returned
		MOV R0, R12
@ POP / restore original register values. DO NOT save or restore R0. Why?
		POP {R1-R12}
@ return to C program
		BX	LR

@ you could write your code without SUBROUTINE


@label: .word value

@.lcomm label num_bytes

MOV R10, R0

Op = 00
I = 0
Cmd = 1101
S = 0
Rn = 0
Rd = 1010
M = 0
Rm = 0000


